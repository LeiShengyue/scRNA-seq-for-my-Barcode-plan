library(Seurat)
library(infercnv)
library(Matrix)

# Data after quality control is stored as rds files
# Read data files
data1 <- readRDS("/Users/Desktop/data/scRNC-seq/QC_data1.rds")
data2 <- readRDS("/Users/Desktop/data/scRNC-seq/QC_data2.rds")
data3 <- readRDS("/Users/Desktop/data/scRNC-seq/QC_data3.rds")

# Extract gene expression count data
rna1 <- data1[["RNA"]]$`counts.Gene Expression.1`
rna2 <- data2[["RNA"]]$`counts.Gene Expression.2`
rna3 <- data3[["RNA"]]$`counts.Gene Expression.3`

# Confirm data type
print(class(rna1))
# [1] "dgCMatrix"
# attr(,"package")
# [1] "Matrix"
print(class(rna2))
# [1] "dgCMatrix"
# attr(,"package")
# [1] "Matrix"
print(class(rna3))
# [1] "dgCMatrix"
# attr(,"package")
# [1] "Matrix"


# Combine data matrices
combined_matrix <- cbind(rna1, rna2, rna3)

# Create Seurat object
seurat_object <- CreateSeuratObject(counts = combined_matrix, project = "10X_Project")

# View Seurat object structure
str(seurat_object)
# Formal class 'Seurat' [package "SeuratObject"] with 13 slots
# ...
# ..@ tools       : list()

# Get Seurat expression matrix data
seurat_expression_matrix <- GetAssayData(seurat_object, assay = "RNA", layer = "counts")

# View data
head(Matrix::t(seurat_expression_matrix))
# 6 x 36601 sparse Matrix of class "dgCMatrix"

# Create infercnv expression matrix
# The raw_counts_matrix contains gene expression matrix and cells(barcodes)
infercnv_expression_matrix <- GetAssayData(seurat_object, assay = "RNA", layer = "counts")

# Extract prefixes to make the colnames same with those in annotation file
prefixes <- sub("_.+$", "", colnames(infercnv_expression_matrix))

# Count prefixes
prefix_counts <- table(prefixes)

# Print prefix counts
print(prefix_counts)
#prefixes
# cell1   cell2   cell3 
#  2000    2210    2100

# Remove prefixes "cell1", "cell2" and "cell3"
colnames(infercnv_expression_matrix) <- sub("^(Cell1_|Cell2_|Cell3_)", "", colnames(infercnv_expression_matrix))

# View column names
head(colnames(infercnv_expression_matrix))
#[1] "AAACCCAGTCACAGTT-1" "AAACGAAGTAACATAG-1" "AAACGCTCACGGATCC-1"

# Create infercnv object
infercnv_obj <- infercnv::CreateInfercnvObject(
    raw_counts_matrix = infercnv_expression_matrix,
    annotations_file = "/Users/Desktop/data/annotations.txt",
    delim = "\t",
    gene_order_file = "/Users/Desktop/data/geneposition.txt",
    ref_group_names = "cell1"
)

# Run infercnv
infercnv_obj = infercnv::run(infercnv_obj, 
                             output_format="pdf",
                             num_threads = 8,
                             cutoff= 0.1, # use 1 for smart-seq, 0.1 for 10x-genomics
                             out_dir="infercnv-data",  # dir is auto-created for storing outputs
                             window_length = 201, # 51 is way to small
                             cluster_by_groups=TRUE, # cluster
                             HMM=TRUE, # turn on to auto-run the HMM prediction of CNV levels
                             HMM_transition_prob=1e-6,
                             HMM_report_by = c("subcluster"), #,"cell"),
                             analysis_mode = c('subclusters'), #, 'cells'),
                             denoise=TRUE,
                             sd_amplifier=1.35)  # sets midpoint for logistic

# Apply median filtering
infercnv_obj_medianfiltered = infercnv::apply_median_filtering(infercnv_obj)

# Plot CNV
infercnv::plot_cnv(infercnv_obj_medianfiltered,
                   out_dir="infercnv-data",
                   output_format="pdf",# or "png?"
                   output_filename='infercnv.median_filtered',
                   x.range="auto",
                   x.center=1,
                   title = "infercnv",
                   color_safe_pal = FALSE)
